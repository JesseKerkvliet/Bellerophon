#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.2 on Wed May 31 12:19:21 2017
#

import wx
import os
import webbrowser
import subprocess
import psutil
import signal
import threading
import time
# begin wxGlade: dependencies
import gettext
# end wxGlade
from subprocess import Popen
# begin wxGlade: extracode
# end wxGlade

class Bellerophon(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Bellerophon.__init__
        wx.Frame.__init__(self, *args, **kwds)
        global process_bel
        process_bel =subprocess.Popen("clear", shell= True, preexec_fn=os.setsid)

        #self.panel_2.Hide()
        self.filename = ""
        self.linkdict = {}
        self.paramdict = {"assembly": False, "left": False, "right": False, "threads": 4,
                          "cdhit": 0.95, "orf": 50, "tpm": 1, "order": 1, "debug": False,
                          "keepBam": False}
        self.label_assembly = wx.StaticText(self, wx.ID_ANY, _("Assembly"), style=wx.ALIGN_CENTER)
        self.file_display_1 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.choose_button_1 = wx.Button(self, wx.ID_ANY, _("Choose File"))

        self.label_left = wx.StaticText(self, wx.ID_ANY, _("Left reads"), style=wx.ALIGN_CENTER)
        self.file_display_2 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.choose_button_2 = wx.Button(self, wx.ID_ANY, _("Choose File"))
        self.label_right = wx.StaticText(self, wx.ID_ANY, _("Right reads"), style=wx.ALIGN_CENTER)
        self.file_display_3 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.choose_button_3 = wx.Button(self, wx.ID_ANY, _("Choose File"))
        self.label_threads = wx.StaticText(self, wx.ID_ANY, _("Threads"), style=wx.ALIGN_RIGHT)
        self.threads_spin = wx.SpinCtrl(self, wx.ID_ANY, "4", min=2, max=14)
        self.debug_button = wx.ToggleButton(self, wx.ID_ANY, _("Run in Debug mode"))
        self.label_1 = wx.StaticText(self, wx.ID_ANY, _("CDHIT cut-off"))
        self.slider_1 = wx.Slider(self, wx.ID_ANY, 95, 75, 100, style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)
        self.button_1 = wx.ToggleButton(self, wx.ID_ANY, _("Keep BAM files"))
        self.label_orf = wx.StaticText(self, wx.ID_ANY, _("ORF cut-off"))
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, _("50"), style=wx.TE_CENTRE)
        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.label_TPM = wx.StaticText(self, wx.ID_ANY, _("TPM cut-off"))
        self.TPM_ctrl = wx.TextCtrl(self, wx.ID_ANY, _("1"), style=wx.TE_CENTRE)
        self.panel_3 = wx.Panel(self, wx.ID_ANY)
        self.label_2 = wx.StaticText(self, wx.ID_ANY, _("Filter order"))
        self.slider_2 = wx.Slider(self, wx.ID_ANY, 0, 1, 8, style=wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)
        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.button_exit = wx.Button(self, wx.ID_ANY, _("Exit"))
        self.button_help = wx.Button(self, wx.ID_ANY, _("Help"))
        self.button_start = wx.Button(self, wx.ID_ANY, _("Start"))

        self.__set_properties()
        self.__do_layout()
        self.linkButtons()
        self.choose_button_1.Bind(wx.EVT_BUTTON, self.open_filedialog)
        self.choose_button_2.Bind(wx.EVT_BUTTON, self.open_filedialog)
        self.choose_button_3.Bind(wx.EVT_BUTTON, self.open_filedialog)
        self.button_exit.Bind(wx.EVT_BUTTON, self.closeScreen)
        self.button_start.Bind(wx.EVT_BUTTON, self.startPipeline)
        self.button_help.Bind(wx.EVT_BUTTON, self.onClickHelp)
        # end wxGlade
    def onClickHelp(self,event):
        webbrowser.open_new(r'Bellerophon_User_manual.pdf')
    def startPipeline(self, event):
        threads = self.threads_spin.GetValue()
        order = self.slider_2.GetValue()
        cdhit = self.slider_1.GetValue()
        cdhit = float(cdhit)/100
        debug = self.debug_button.GetValue()
        keepBam = self.button_1.GetValue()
        tpm = self.TPM_ctrl.GetValue()
        orf = self.text_ctrl_1.GetValue()
        if not tpm.isnumeric() or not orf.isnumeric():
            self.warnUser()
        elif not self.paramdict["assembly"] or not self.paramdict["left"] or not self.paramdict["right"]:
            self.warnUser()
        else:
            self.paramdict.update(dict(zip(tuple(["threads","order","cdhit","tpm","orf","debug","keepBam"]),
             tuple([threads,order,cdhit,tpm,orf, debug, keepBam]))))
            self.createOneliner()

    def createOneliner(self):
        oneliner=str("bash Bellerophon_startscript.sh --assembly %s --left %s --right %s "\
        %(self.paramdict["assembly"],self.paramdict["left"],self.paramdict["right"]))
        if self.paramdict["debug"]:
            oneliner += " --debug "
        if self.paramdict["keepBam"]:
            oneliner += " --keep true "
        if self.paramdict["order"] != 1:
	    print(self.paramdict["order"])
            oneliner += "-O %s "%str(self.paramdict["order"])
        if self.paramdict["orf"] != 50:
            oneliner += "-o %s "%str(self.paramdict["orf"])
        if self.paramdict["tpm"] != 1:
            oneliner += "-t %s "%str(self.paramdict["tpm"])
        if self.paramdict["threads"] != 4:
            oneliner += "-T %s "%str(self.paramdict["threads"])
        oneliner += " 1> progress.txt "
	print(oneliner)
        global process_bel
        process_bel = subprocess.Popen("%s &"%oneliner, shell=True,
                                            preexec_fn=os.setsid)

        self.frame_2 = Progress(None, wx.ID_ANY, "")
        self.frame_2.Centre()
        #wx.MessageBox("You're running!!")
        self.frame_2.Show()

        self.Close()

        #self.frame_2.printFile()
    def warnUser(self):
        wx.MessageBox('Something went wrong!\nPlease check your input or refer to the user manual.\
        \nThe text field only accept whole numbers and all files in the left column need to be selected.', 'Error', wx.OK | wx.ICON_ERROR)



    def closeScreen(self, event):
        self.Close()
        os.killpg(os.getpgid(process_bel.pid), signal.SIGTERM)
    def linkButtons(self):
        self.choose_button_1.name = "choose_1"
        self.choose_button_2.name = "choose_2"
        self.choose_button_3.name = "choose_3"
        self.file_display_1.name = "display_1"
        self.file_display_2.name = "display_2"
        self.file_display_3.name = "display_3"

        self.linkdict = {"choose_1":["display_1",self.file_display_1, "assembly"],
                         "choose_2":["display_2", self.file_display_2, "left"],
                         "choose_3":["display_3", self.file_display_3, "right"]}
    def __set_properties(self):
        # begin wxGlade: Bellerophon.__set_properties
        self.SetTitle(_("Bellerophon GUI"))
        # end wxGlade
    def setFileName(self, value):
        self.filename=value
    def getFileName(self):
        return(self.filename)
    def open_filedialog(self, event):
        file = 'nofile'
        wildcard="pictures (*.fasta, *.fa, *.fastq, *.fastq.tar.gz *.fastq.gz )|*.fasta;*.fa;*.fastq;*.gz"
        dlg = wx.FileDialog(
            self, "Select Filter File", os.getcwd(),"",wildcard,wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            file = dlg.GetPath()
        dlg.Destroy()
        self.setFileName(file)
        button_name = event.GetEventObject().name
        display_name = self.linkdict[button_name][1]
        self.paramdict[self.linkdict[button_name][2]] = file
        displayfile = file.split("/")[-1]
        display_name.ChangeValue(displayfile)

    def __do_layout(self):
        # begin wxGlade: Bellerophon.__do_layout
        global_sizer = wx.BoxSizer(wx.VERTICAL)
        devide_sizer = wx.BoxSizer(wx.VERTICAL)
        bottom_devide_sizer = wx.BoxSizer(wx.HORIZONTAL)
        button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        arg_sizer = wx.BoxSizer(wx.HORIZONTAL)
        param_sizer = wx.GridSizer(5, 3, 0, 0)
        filepick_sizer = wx.GridSizer(3, 2, 5, 5)
        right_splitter = wx.BoxSizer(wx.VERTICAL)
        left_spliter = wx.BoxSizer(wx.VERTICAL)
        assembly_splitter = wx.BoxSizer(wx.VERTICAL)
        filepick_sizer.Add(self.label_assembly, 0, wx.ALIGN_CENTER, 0)
        assembly_splitter.Add(self.file_display_1, 0, wx.EXPAND, 0)
        assembly_splitter.Add(self.choose_button_1, 0, wx.EXPAND, 0)
        filepick_sizer.Add(assembly_splitter, 1, 0, 0)
        filepick_sizer.Add(self.label_left, 0, wx.ALIGN_CENTER, 0)
        left_spliter.Add(self.file_display_2, 0, wx.EXPAND, 0)
        left_spliter.Add(self.choose_button_2, 0, wx.EXPAND, 0)
        filepick_sizer.Add(left_spliter, 1, 0, 0)
        filepick_sizer.Add(self.label_right, 0, wx.ALIGN_CENTER, 0)
        right_splitter.Add(self.file_display_3, 0, wx.EXPAND, 0)
        right_splitter.Add(self.choose_button_3, 0, wx.EXPAND, 0)
        filepick_sizer.Add(right_splitter, 1, 0, 0)
        arg_sizer.Add(filepick_sizer, 2, wx.ALL | wx.EXPAND, 20)
        param_sizer.Add(self.label_threads, 0, wx.ALIGN_CENTER, 0)
        param_sizer.Add(self.threads_spin, 0, wx.ALIGN_CENTER | wx.SHAPED, 0)
        param_sizer.Add(self.debug_button, 0, wx.ALIGN_CENTER | wx.LEFT | wx.SHAPED, 5)
        param_sizer.Add(self.label_1, 0, wx.ALIGN_CENTER, 0)
        param_sizer.Add(self.slider_1, 0, wx.ALIGN_CENTER | wx.EXPAND, 0)
        param_sizer.Add(self.button_1, 0, wx.ALIGN_CENTER | wx.LEFT | wx.SHAPED, 5)
        param_sizer.Add(self.label_orf, 0, wx.ALIGN_CENTER, 0)
        param_sizer.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER | wx.SHAPED, 0)
        param_sizer.Add(self.panel_2, 1, 0, 0)
        param_sizer.Add(self.label_TPM, 0, wx.ALIGN_CENTER, 0)
        param_sizer.Add(self.TPM_ctrl, 0, wx.ALIGN_CENTER, 0)
        param_sizer.Add(self.panel_3, 1, 0, 0)
        param_sizer.Add(self.label_2, 0, wx.ALIGN_CENTER, 0)
        param_sizer.Add(self.slider_2, 0, wx.EXPAND, 0)
        param_sizer.Add(self.panel_4, 1, 0, 0)
        arg_sizer.Add(param_sizer, 3, wx.ALL | wx.EXPAND, 20)
        devide_sizer.Add(arg_sizer, 8, 0, 0)
        bottom_devide_sizer.Add(self.panel_1, 6, 0, 0)
        button_sizer.Add(self.button_exit, 0, 0, 0)
        button_sizer.Add(self.button_help, 0, 0, 0)
        button_sizer.Add(self.button_start, 0, 0, 0)
        bottom_devide_sizer.Add(button_sizer, 2, wx.ALIGN_RIGHT, 0)
        devide_sizer.Add(bottom_devide_sizer, 1, 0, 0)
        global_sizer.Add(devide_sizer, 1, 0, 0)
        self.SetSizer(global_sizer)
        global_sizer.Fit(self)
        self.Layout()
        # end wxGlade


# end of class Bellerophon
class Progress(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Progress.__init__
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, wx.ID_ANY, _("Your job is now running!\nGrab a cup of coffee and come back later."), style=wx.ALIGN_CENTER)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.button_cancel = wx.Button(self, wx.ID_ANY, _("Cancel task"))
        self.button_cancel.Bind(wx.EVT_BUTTON, self.onClickCancel)
        self.__set_properties()
        self.__do_layout()
        #self.panel_1.Bind(wx.EVT_ENTER_WINDOW,  self.printFile)
        self.Bind(wx.EVT_SHOW,  self.runThread)
        # end wxGlade
        self.Centre()
    def runThread(self, event):
        self.Unbind(wx.EVT_MOUSE_EVENTS)
        self.thread = threading.Thread(target=self.printFile)
        self.thread.setDaemon(True)
        self.thread.start()
    def printFile(self):

        while True:
            openFile = open('progress.txt','r').readlines()

            try:
                self.updateProgress("Now doing: %s"%openFile[-1])
                if openFile[-1] == "Done!\n":
                    wx.CallAfter(self.button_cancel.SetLabel, "Exit")
                    break
            except IndexError:
                pass
            time.sleep(1)

    def updateProgress(self, text):
        updatedtext= "Your job is now running!\nGrab a cup of coffee and come back later.\n%s"\
                        %text
        wx.CallAfter(self.label_1.SetLabel, updatedtext)
    def onClickCancel(self, event):
        os.killpg(os.getpgid(process_bel.pid), signal.SIGTERM)
        self.Close()
    def __set_properties(self):
        # begin wxGlade: Progress.__set_properties
        self.SetTitle(_("Bellerophon is running!"))

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Progress.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_1, 6, wx.ALIGN_CENTER | wx.LEFT | wx.RIGHT | wx.SHAPED, 10)
        sizer_3.Add(self.panel_1, 5, wx.EXPAND, 0)
        sizer_3.Add(self.button_cancel, 2, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, 0, 0)
        sizer_1.Add(sizer_2, 1, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()

        # end wxGlade

# end of class Progress

# end of class LogFrame
if __name__ == "__main__":
    gettext.install("logApp") # replace with the appropriate catalog name

    logApp = wx.PySimpleApp()
    global frame_1
    frame_1 = Bellerophon(None, wx.ID_ANY, "")
    frame_1.Centre()
    logApp.SetTopWindow(frame_1)

    frame_1.Show()
    logApp.MainLoop()
